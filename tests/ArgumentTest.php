<?php

/**
 * Copyright (c) 2015 DD Art Tomasz Duda
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

namespace PowerEcommerce\System;

use PowerEcommerce\Utils\DataGenerator;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-20 at 20:59:58.
 *
 * @group System
 * @group Argument
 */
class ArgumentTest extends BaseTest
{
    function __assert()
    {
    }

    function testOf()
    {
        $assert = function (Object $data) {
            $reflector = new \ReflectionClass('\PowerEcommerce\System\TypeCode');
            $className = (new \ReflectionObject($data))->getShortName();
            $funcName = 'of' . $className;

            $this->assertTrue((new Argument($data))->$funcName());
            $this->assertTrue((new Argument($data, $data))->$funcName());
            $this->assertTrue((new Argument($data))->ofObject());
            $this->assertTrue((new Argument($data, $data))->ofObject());
            $this->assertTrue((new Argument($data))->of(TypeCode::PHP_NULL | $reflector->getConstant(strtoupper($className))));
            $this->assertTrue((new Argument($data, $data))->of(TypeCode::PHP_NULL | $reflector->getConstant(strtoupper($className))));
            $this->assertTrue((new Argument($data))->isof(TypeCode::PHP_NULL | $reflector->getConstant(strtoupper($className))));
            $this->assertTrue((new Argument($data, $data))->isof(TypeCode::PHP_NULL | $reflector->getConstant(strtoupper($className))));

            $this->assertFalse((new Argument(null))->$funcName());
            $this->assertFalse((new Argument(null, null))->$funcName());
            $this->assertFalse((new Argument(null))->ofObject());
            $this->assertFalse((new Argument(null, null))->ofObject());
            $this->assertFalse((new Argument(null))->of($reflector->getConstant(strtoupper($className))));
            $this->assertFalse((new Argument(null, null))->of($reflector->getConstant(strtoupper($className))));
            $this->assertFalse((new Argument(null))->isof($reflector->getConstant(strtoupper($className))));
            $this->assertFalse((new Argument(null, null))->isof($reflector->getConstant(strtoupper($className))));
        };
        foreach (self::_object() as $data) $assert($data);
    }

    function testStrict()
    {
        $reflector = new \ReflectionClass('\PowerEcommerce\System\TypeCode');

        $test = function (Object $data) use ($reflector) {
            $className = (new \ReflectionObject($data))->getShortName();
            $this->assertTrue((new Argument($data))->strict($reflector->getConstant(strtoupper($className))));
            $this->assertTrue((new Argument($data, $data))->strict($reflector->getConstant(strtoupper($className))));
        };

        foreach (self::_object() as $data) $test($data);
    }

    function testStrictInvalidArgumentException()
    {
        $i = $j = 0;

        $test = function (Object $data) use (&$i) {
            try {
                (new Argument($data))->strict(TypeCode::PHP_NULL);
            } catch (\InvalidArgumentException $e) {
                ++$i;
            }
            return 1;
        };

        foreach (self::_object() as $data) $j += $test($data);
        $this->assertEquals($j, $i);
    }

    function testAssert()
    {
        $test = function ($data) {
            $data1 = $data + 1;
            $data2 = $data - 1;
            $this->assertTrue((new Argument($data))->assertEquals($data));
            if ($data != $data1) {
                $this->assertTrue((new Argument($data1))->assertGreaterThan($data));
                $this->assertTrue((new Argument($data1))->assertGreaterThanOrEqual($data));
            }
            if ($data != $data2) {
                $this->assertTrue((new Argument($data2))->assertLessThan($data));
                $this->assertTrue((new Argument($data2))->assertLessThanOrEqual($data));
            }
            $this->assertTrue((new Argument($data))->assertGreaterThanOrEqual($data));
            $this->assertTrue((new Argument($data))->assertLessThanOrEqual($data));

            $this->assertTrue((new Argument(new Blank()))->assertInstanceOf(new Blank()));
            $this->assertTrue((new Argument($data))->assertSame($data));
        };
        foreach (DataGenerator::_integer() as $data) $test($data);
        foreach (DataGenerator::_float() as $data) $test($data);
    }

    function testIs()
    {
        $run = [
            ['isArray', 'assertTrue', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse'],
            ['isBool', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertTrue', 'assertFalse', 'assertFalse'],
            ['isNull', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertTrue', 'assertFalse'],

            ['isDouble', 'assertFalse', 'assertFalse', 'assertTrue', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse'],
            ['isFloat', 'assertFalse', 'assertFalse', 'assertTrue', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse'],
            ['isReal', 'assertFalse', 'assertFalse', 'assertTrue', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse'],

            ['isInt', 'assertFalse', 'assertTrue', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse'],
            ['isInteger', 'assertFalse', 'assertTrue', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse'],
            ['isLong', 'assertFalse', 'assertTrue', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse'],

            ['isNumeric', 'assertFalse', 'assertTrue', '__assert', 'assertFalse', '__assert', 'assertFalse', 'assertFalse', 'assertFalse'],
            ['isNumeric', 'assertFalse', '__assert', 'assertTrue', 'assertFalse', '__assert', 'assertFalse', 'assertFalse', 'assertFalse'],
            ['isNumber', 'assertFalse', 'assertTrue', '__assert', 'assertFalse', '__assert', 'assertFalse', 'assertFalse', 'assertFalse'],
            ['isNumber', 'assertFalse', '__assert', 'assertTrue', 'assertFalse', '__assert', 'assertFalse', 'assertFalse', 'assertFalse'],

            ['isObject', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertTrue'],
            ['isResource', 'assertFalse', 'assertFalse', 'assertFalse', 'assertTrue', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse'],
            ['isString', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertTrue', 'assertFalse', 'assertFalse', 'assertFalse'],

            ['isScalar', 'assertFalse', 'assertTrue', '__assert', 'assertFalse', '__assert', '__assert', 'assertFalse', 'assertFalse'],
            ['isScalar', 'assertFalse', '__assert', 'assertTrue', 'assertFalse', '__assert', '__assert', 'assertFalse', 'assertFalse'],
            ['isScalar', 'assertFalse', '__assert', '__assert', 'assertFalse', '__assert', '__assert', 'assertFalse', 'assertFalse'],
            ['isScalar', 'assertFalse', '__assert', '__assert', 'assertFalse', '__assert', 'assertTrue', 'assertFalse', 'assertFalse'],
        ];

        $i = 100;

        foreach ($run as list($funcName, $a1, $a2, $a3, $a4, $a5, $a6, $a7, $a8)) {
            foreach (DataGenerator::_array($i) as $data) $this->$a1((new Argument($data))->$funcName());
            foreach (DataGenerator::_integer($i) as $data) $this->$a2((new Argument($data))->$funcName());
            foreach (DataGenerator::_float($i) as $data) $this->$a3((new Argument($data))->$funcName());
            foreach (DataGenerator::_resource($i) as $data) $this->$a4((new Argument($data))->$funcName());
            foreach (DataGenerator::_string($i) as $data) $this->$a5((new Argument($data))->$funcName());
            foreach (DataGenerator::_boolean($i) as $data) $this->$a6((new Argument($data))->$funcName());
            foreach (DataGenerator::_null($i) as $data) $this->$a7((new Argument($data))->$funcName());
            foreach (DataGenerator::_object($i) as $data) $this->$a8((new Argument($data))->$funcName());

            foreach (DataGenerator::_array($i) as $data) $this->$a1((new Argument($data, $data))->$funcName());
            foreach (DataGenerator::_integer($i) as $data) $this->$a2((new Argument($data, $data))->$funcName());
            foreach (DataGenerator::_float($i) as $data) $this->$a3((new Argument($data, $data))->$funcName());
            foreach (DataGenerator::_resource($i) as $data) $this->$a4((new Argument($data, $data))->$funcName());
            foreach (DataGenerator::_string($i) as $data) $this->$a5((new Argument($data, $data))->$funcName());
            foreach (DataGenerator::_boolean($i) as $data) $this->$a6((new Argument($data, $data))->$funcName());
            foreach (DataGenerator::_null($i) as $data) $this->$a7((new Argument($data, $data))->$funcName());
            foreach (DataGenerator::_object($i) as $data) $this->$a8((new Argument($data, $data))->$funcName());
        }

        $this->assertTrue((new Argument([$this, 'testIs']))->isCallable());
        $this->assertTrue((new Argument([$this, 'testIs'], [$this, 'testIs']))->isCallable());

        $this->assertTrue((new Argument('\PowerEcommerce\System\ArgumentTest::testIs'))->isCallable());
        $this->assertTrue((new Argument('\PowerEcommerce\System\ArgumentTest::testIs', '\PowerEcommerce\System\ArgumentTest::testIs'))->isCallable());

        $this->assertTrue((new Argument(function () {
        }))->isCallable());
        $this->assertTrue((new Argument(function () {
        }, function () {
        }))->isCallable());

        $run = [
            [TypeCode::BLANK | TypeCode::PHP_ARRAY, 'assertTrue', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse'],
            [TypeCode::BLANK | TypeCode::PHP_BOOL, 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertTrue', 'assertFalse', 'assertFalse'],
            [TypeCode::BLANK | TypeCode::PHP_NULL, 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertTrue', 'assertFalse'],

            [TypeCode::BLANK | TypeCode::PHP_DOUBLE, 'assertFalse', 'assertFalse', 'assertTrue', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse'],
            [TypeCode::BLANK | TypeCode::PHP_FLOAT, 'assertFalse', 'assertFalse', 'assertTrue', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse'],
            [TypeCode::BLANK | TypeCode::PHP_REAL, 'assertFalse', 'assertFalse', 'assertTrue', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse'],

            [TypeCode::BLANK | TypeCode::PHP_INT, 'assertFalse', 'assertTrue', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse'],
            [TypeCode::BLANK | TypeCode::PHP_INTEGER, 'assertFalse', 'assertTrue', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse'],
            [TypeCode::BLANK | TypeCode::PHP_LONG, 'assertFalse', 'assertTrue', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse'],

            [TypeCode::BLANK | TypeCode::PHP_NUMERIC, 'assertFalse', 'assertTrue', '__assert', 'assertFalse', '__assert', 'assertFalse', 'assertFalse', 'assertFalse'],
            [TypeCode::BLANK | TypeCode::PHP_NUMERIC, 'assertFalse', '__assert', 'assertTrue', 'assertFalse', '__assert', 'assertFalse', 'assertFalse', 'assertFalse'],

            [TypeCode::BLANK | TypeCode::PHP_OBJECT, 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertTrue'],
            [TypeCode::BLANK | TypeCode::PHP_RESOURCE, 'assertFalse', 'assertFalse', 'assertFalse', 'assertTrue', 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse'],
            [TypeCode::BLANK | TypeCode::PHP_STRING, 'assertFalse', 'assertFalse', 'assertFalse', 'assertFalse', 'assertTrue', 'assertFalse', 'assertFalse', 'assertFalse'],

            [TypeCode::BLANK | TypeCode::PHP_SCALAR, 'assertFalse', 'assertTrue', '__assert', 'assertFalse', '__assert', '__assert', 'assertFalse', 'assertFalse'],
            [TypeCode::BLANK | TypeCode::PHP_SCALAR, 'assertFalse', '__assert', 'assertTrue', 'assertFalse', '__assert', '__assert', 'assertFalse', 'assertFalse'],
            [TypeCode::BLANK | TypeCode::PHP_SCALAR, 'assertFalse', '__assert', '__assert', 'assertFalse', '__assert', '__assert', 'assertFalse', 'assertFalse'],
            [TypeCode::BLANK | TypeCode::PHP_SCALAR, 'assertFalse', '__assert', '__assert', 'assertFalse', '__assert', 'assertTrue', 'assertFalse', 'assertFalse'],
        ];

        $i = 100;

        foreach ($run as list($flags, $a1, $a2, $a3, $a4, $a5, $a6, $a7, $a8)) {
            foreach (DataGenerator::_array($i) as $data) $this->$a1((new Argument($data))->is($flags));
            foreach (DataGenerator::_array($i) as $data) $this->$a1((new Argument($data))->isof($flags));
            foreach (DataGenerator::_integer($i) as $data) $this->$a2((new Argument($data))->is($flags));
            foreach (DataGenerator::_integer($i) as $data) $this->$a2((new Argument($data))->isof($flags));
            foreach (DataGenerator::_float($i) as $data) $this->$a3((new Argument($data))->is($flags));
            foreach (DataGenerator::_float($i) as $data) $this->$a3((new Argument($data))->isof($flags));
            foreach (DataGenerator::_resource($i) as $data) $this->$a4((new Argument($data))->is($flags));
            foreach (DataGenerator::_resource($i) as $data) $this->$a4((new Argument($data))->isof($flags));
            foreach (DataGenerator::_string($i) as $data) $this->$a5((new Argument($data))->is($flags));
            foreach (DataGenerator::_string($i) as $data) $this->$a5((new Argument($data))->isof($flags));
            foreach (DataGenerator::_boolean($i) as $data) $this->$a6((new Argument($data))->is($flags));
            foreach (DataGenerator::_boolean($i) as $data) $this->$a6((new Argument($data))->isof($flags));
            foreach (DataGenerator::_null($i) as $data) $this->$a7((new Argument($data))->is($flags));
            foreach (DataGenerator::_null($i) as $data) $this->$a7((new Argument($data))->isof($flags));
            foreach (DataGenerator::_object($i) as $data) $this->$a8((new Argument($data))->is($flags));
            foreach (DataGenerator::_object($i) as $data) $this->$a8((new Argument($data))->isof($flags));

            foreach (DataGenerator::_array($i) as $data) $this->$a1((new Argument($data, $data))->is($flags));
            foreach (DataGenerator::_array($i) as $data) $this->$a1((new Argument($data, $data))->isof($flags));
            foreach (DataGenerator::_integer($i) as $data) $this->$a2((new Argument($data, $data))->is($flags));
            foreach (DataGenerator::_integer($i) as $data) $this->$a2((new Argument($data, $data))->isof($flags));
            foreach (DataGenerator::_float($i) as $data) $this->$a3((new Argument($data, $data))->is($flags));
            foreach (DataGenerator::_float($i) as $data) $this->$a3((new Argument($data, $data))->isof($flags));
            foreach (DataGenerator::_resource($i) as $data) $this->$a4((new Argument($data, $data))->is($flags));
            foreach (DataGenerator::_resource($i) as $data) $this->$a4((new Argument($data, $data))->isof($flags));
            foreach (DataGenerator::_string($i) as $data) $this->$a5((new Argument($data, $data))->is($flags));
            foreach (DataGenerator::_string($i) as $data) $this->$a5((new Argument($data, $data))->isof($flags));
            foreach (DataGenerator::_boolean($i) as $data) $this->$a6((new Argument($data, $data))->is($flags));
            foreach (DataGenerator::_boolean($i) as $data) $this->$a6((new Argument($data, $data))->isof($flags));
            foreach (DataGenerator::_null($i) as $data) $this->$a7((new Argument($data, $data))->is($flags));
            foreach (DataGenerator::_null($i) as $data) $this->$a7((new Argument($data, $data))->isof($flags));
            foreach (DataGenerator::_object($i) as $data) $this->$a8((new Argument($data, $data))->is($flags));
            foreach (DataGenerator::_object($i) as $data) $this->$a8((new Argument($data, $data))->isof($flags));
        }
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
}
