<?php

/**
 * Copyright (c) 2015 DD Art Tomasz Duda
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

namespace PowerEcommerce\System\Data;

use PowerEcommerce\System\TypeCode;
use PowerEcommerce\System\Util\BaseUnit;
use PowerEcommerce\System\Util\DataGenerator;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-21 at 18:26:37.
 *
 * @group System
 * @group String
 */
class StringTest extends BaseUnit
{
    /**
     * @var \PowerEcommerce\System\Data\String
     */
    protected $object;

    function testConstructorInvalidArgumentException()
    {
        $i = $j = 0;

        $test = function ($data) use (&$i) {
            try {
                new String($data);
            } catch (\InvalidArgumentException $e) {
                ++$i;
            }
            return 1;
        };

        $j += $test(DataGenerator::_object()->current());
        $j += $test(DataGenerator::_integer()->current());
        $j += $test(DataGenerator::_array()->current());
        $j += $test(DataGenerator::_boolean()->current());
        $j += $test(DataGenerator::_float()->current());
        $j += $test(DataGenerator::_null()->current());
        $j += $test(DataGenerator::_resource()->current());

        $this->assertEquals($j, $i);
    }

    function testSetValue()
    {
        $assert = function ($data) {
            $this->assertTrue($this->object->setValue($data) instanceof String);
        };
        foreach (DataGenerator::_string() as $data) $assert($data);
        foreach (self::_object() as $data) $assert($data);
    }

    function testSetValueInvalidArgumentException()
    {
        $i = $j = 0;

        $test = function ($data) use (&$i) {
            try {
                $this->object->setValue($data);
            } catch (\InvalidArgumentException $e) {
                ++$i;
            }
            return 1;
        };

        $j += $test(DataGenerator::_object()->current());
        $j += $test(DataGenerator::_integer()->current());
        $j += $test(DataGenerator::_array()->current());
        $j += $test(DataGenerator::_boolean()->current());
        $j += $test(DataGenerator::_float()->current());
        $j += $test(DataGenerator::_null()->current());
        $j += $test(DataGenerator::_resource()->current());

        $this->assertEquals($j, $i);
    }

    function testGetValue()
    {
        $assert = function ($data) {
            $this->assertTrue(is_string($this->object->setValue($data)->getValue()));
        };

        $this->assertTrue(is_string($this->object->getValue()));

        foreach (DataGenerator::_string(1000) as $data) $assert($data);
        foreach (self::_object() as $data) $assert($data);
    }

    function testCompare()
    {
        $assert = function ($data) {
            $this->assertTrue($this->object->setValue($data)->compare($data));
        };

        foreach (DataGenerator::_string() as $data) $assert($data);
        foreach (self::_object() as $data) $assert($data);
    }

    function testCompareNoStrict()
    {
        $assert = function ($data) {
            $this->assertTrue($this->object->setValue($data)->compare($data, false));
        };

        foreach (DataGenerator::_string() as $data) $assert($data);
        foreach (self::_object() as $data) $assert($data);
    }

    function testConcat()
    {
        $assert = function ($data) {
            $tmp = DataGenerator::_string()->current();
            $this->assertSame($data . $tmp, $this->object->setValue($data)->concat($tmp)->getValue());
        };
        foreach (DataGenerator::_string() as $data) $assert($data);
    }

    function testContains()
    {
        $assert = function ($data) {
            $this->assertTrue($this->object->setValue($data)->contains($data));
            !is_object($data) && $this->assertTrue($this->object->setValue($data)->contains(substr($data, 0, strlen($data) > 1 ? strlen($data) - 1 : 1)));
        };

        foreach (DataGenerator::_string() as $data) $assert($data);
        foreach (self::_object() as $data) $assert($data);
    }

    function testContainsNoStrict()
    {
        $assert = function ($data) {
            $this->assertTrue($this->object->setValue($data)->contains($data, false));
            !is_object($data) && $this->assertTrue($this->object->setValue($data)->contains(substr($data, 0, strlen($data) > 1 ? strlen($data) - 1 : 1), false));
        };

        foreach (DataGenerator::_string() as $data) $assert($data);
        foreach (self::_object() as $data) $assert($data);
    }

    function testGetTypeCode()
    {
        $this->assertSame(TypeCode::STRING, $this->object->getTypeCode());
    }

    function testJoin()
    {
        $assert = function ($data) {
            $tmp = DataGenerator::_string()->current();
            $this->assertSame($data . $data . $tmp . $tmp, $this->object->setValue($data)->join([$data, $tmp, $tmp])->getValue());
        };
        foreach (DataGenerator::_string() as $data) $assert($data);
    }

    function testSubstring()
    {
        $assert = function ($data) {
            $max = strlen($data);
            if ($max) {
                $start = $max - mt_rand(0, $max - 1);
                $end = mt_rand($start, $max);
            } else {
                $start = $max;
                $end = $max;
            }
            $this->assertSame(substr($data, $start, $end), $this->object->setValue($data)->substring($start, $end));
        };
        foreach (DataGenerator::_string() as $data) $assert($data);
    }

    function testTruncate()
    {
        $assert = function ($data) {
            $max = strlen($data);
            if ($max) {
                $start = $max - mt_rand(0, $max - 1);
                $end = mt_rand($start, $max);
            } else {
                $start = $max;
                $end = $max;
            }
            $this->assertSame($start == $end ? '' : substr($data, $start, $end), $this->object->setValue($data)->truncate($start, $end)->getValue());
            $this->assertSame('', $this->object->setValue($data)->truncate()->getValue());
        };
        foreach (DataGenerator::_string() as $data) $assert($data);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new String;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
}
